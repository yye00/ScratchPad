#include <pybind11/pybind11.h>
#include <pybind11/numpy.h>
#include <pybind11/stl.h>
#include <mkl.h>
#include <vector>
#include <iostream>

namespace py = pybind11;

py::array_t<double> batch_matrix_multiply(py::array_t<double> array1, py::array_t<double> array2) {
    py::buffer_info buf1 = array1.request();
    py::buffer_info buf2 = array2.request();

    if (buf1.ndim != 2) {
        throw std::runtime_error("Input array1 must be 2D");
    }
    if (buf2.ndim != 3) {
        throw std::runtime_error("Input array2 must be 3D");
    }

    auto rows1 = buf1.shape[0];
    auto cols1 = buf1.shape[1];
    auto batch_size = buf2.shape[0];
    auto rows2 = buf2.shape[1];
    auto cols2 = buf2.shape[2];

    if (cols1 != rows2) {
        throw std::runtime_error("Matrix dimensions must match for multiplication");
    }

    std::vector<size_t> result_shape = {batch_size, rows1, cols2};
    py::array_t<double> result(result_shape);
    py::buffer_info buf_result = result.request();

    double* ptr1 = static_cast<double*>(buf1.ptr);
    double* ptr2 = static_cast<double*>(buf2.ptr);
    double* ptr_result = static_cast<double*>(buf_result.ptr);

    std::vector<const double*> a_array(batch_size);
    std::vector<const double*> b_array(batch_size);
    std::vector<double*> c_array(batch_size);

    for (size_t i = 0; i < batch_size; ++i) {
        a_array[i] = ptr1;
        b_array[i] = ptr2 + i * rows2 * cols2;
        c_array[i] = ptr_result + i * rows1 * cols2;
    }

    const double alpha = 1.0;
    const double beta = 0.0;

    CBLAS_TRANSPOSE trans = CblasNoTrans;

    cblas_dgemm_batch(CblasRowMajor, &trans, &trans, 
                      &rows1, &cols2, &cols1, 
                      &alpha, a_array.data(), &cols1, 
                      b_array.data(), &cols2, 
                      &beta, c_array.data(), &cols2, 
                      1, &batch_size);

    return result;
}

PYBIND11_MODULE(example, m) {
    m.def("batch_matrix_multiply", &batch_matrix_multiply, "Perform batch matrix multiplication using MKL");
}

#include <pybind11/pybind11.h>
#include <pybind11/numpy.h>
#include <pybind11/stl.h>

namespace py = pybind11;

void process_numpy_arrays(const py::list& array_list) {
    for (auto item : array_list) {
        py::array_t<double> array = item.cast<py::array_t<double>>();
        py::buffer_info info = array.request();
        double* data = static_cast<double*>(info.ptr);
        size_t size = info.size;

        // Process each array (example: print the first element)
        if (size > 0) {
            std::cout << "First element of array: " << data[0] << std::endl;
        }
    }
}

PYBIND11_MODULE(example, m) {
    m.def("process_numpy_arrays", &process_numpy_arrays, "Process a list of numpy arrays");
}
