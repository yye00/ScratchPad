#include <pybind11/pybind11.h>
#include <pybind11/numpy.h>
#include <pybind11/stl.h>
#include <mkl.h>
#include <vector>
#include <iostream>

namespace py = pybind11;

py::list batch_matrix_multiply(const py::list& A_list, py::array_t<double> B, const py::list& B_shapes_list) {
    py::buffer_info bufB = B.request();

    if (bufB.ndim != 2) {
        throw std::runtime_error("Input matrix B must be 2D");
    }

    py::list result_list;

    for (size_t idx = 0; idx < A_list.size(); ++idx) {
        py::array_t<double> A = A_list[idx].cast<py::array_t<double>>();
        py::buffer_info bufA = A.request();
        std::vector<int> B_shape = B_shapes_list[idx].cast<std::vector<int>>();

        if (bufA.ndim != 2) {
            throw std::runtime_error("Each matrix in A_list must be 2D");
        }

        int rowsA = bufA.shape[0];
        int colsA = bufA.shape[1];

        int batch_size = B_shape[0];
        int rowsB = B_shape[1];
        int colsB = B_shape[2];

        if (bufB.shape[0] != batch_size * rowsB) {
            throw std::runtime_error("The shape of B does not match the given batch size and dimensions");
        }

        if (colsA != rowsB) {
            throw std::runtime_error("Matrix dimensions must match for multiplication");
        }

        std::vector<size_t> result_shape = {static_cast<size_t>(batch_size), static_cast<size_t>(rowsA), static_cast<size_t>(colsB)};
        py::array_t<double> result(result_shape);
        py::buffer_info buf_result = result.request();

        double* ptrA = static_cast<double*>(bufA.ptr);
        double* ptrB = static_cast<double*>(bufB.ptr);
        double* ptr_result = static_cast<double*>(buf_result.ptr);

        std::vector<const double*> a_array(batch_size);
        std::vector<const double*> b_array(batch_size);
        std::vector<double*> c_array(batch_size);

        for (int i = 0; i < batch_size; ++i) {
            a_array[i] = ptrA;
            b_array[i] = ptrB + i * rowsB * colsB;
            c_array[i] = ptr_result + i * rowsA * colsB;
        }

        const double alpha = 1.0;
        const double beta = 0.0;

        CBLAS_TRANSPOSE trans = CblasNoTrans;

        cblas_dgemm_batch(CblasRowMajor, &trans, &trans, 
                          &rowsA, &colsB, &colsA, 
                          &alpha, a_array.data(), &colsA, 
                          b_array.data(), &colsB, 
                          &beta, c_array.data(), &colsB, 
                          1, &batch_size);

        result_list.append(result);
    }

    return result_list;
}

PYBIND11_MODULE(example, m) {
    m.def("batch_matrix_multiply", &batch_matrix_multiply, "Perform batch matrix multiplication using MKL");
}

cmake_minimum_required(VERSION 3.4...3.18)
project(example)

set(CMAKE_CXX_STANDARD 14)

find_package(pybind11 REQUIRED)

# Find MKL
find_package(MKL REQUIRED)

# Add include directories and link libraries for MKL
include_directories(${MKL_INCLUDE_DIR})
link_directories(${MKL_LIB_DIR})

pybind11_add_module(example example.cpp)

# Link MKL libraries
target_link_libraries(example PRIVATE ${MKL_LIBRARIES})


import numpy as np
import example

# Create a list of 2D matrices (A_list)
A_list = [np.array([[1.0, 2.0], [3.0, 4.0]]), np.array([[5.0, 6.0], [7.0, 8.0]])]

# Create a 2D matrix (B)
B = np.array([[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], [9.0, 10.0, 11.0, 12.0], [13.0, 14.0, 15.0, 16.0]])

# Define the shapes of B for reshaping
B_shapes = [[2, 2, 2], [2, 2, 2]]  # Two shapes, one for each A

# Perform batch matrix multiplication
result_list = example.batch_matrix_multiply(A_list, B, B_shapes)

print("Result of batch matrix multiplication:")
for result in result_list:
    print(result)
